import os
import os.path


class CertificateGeneration:
	def __init__(self):
		self.ca_required = {{ certificate_ca_required }}
		self.ca_certificate_file_path = "{{ certificate_ca_certificate_file_path }}"
		self.ca_key_file_path = "{{ certificate_ca_key_file_path }}"
		self.ca_key_passphrase = "{{ certificate_ca_key_passphrase }}"
		self.ca_valid_days = "{{ certificate_ca_valid_days }}"
		self.server_valid_days = "{{ certificate_server_valid_days }}"
		self.server_list = [
			{% for ip in groups['master_node'] %}
			"{{ ip }}",
			{% endfor %}
		]
		self.service_cluster_ip_range = "{{ service_cluster_ip_range }}"
		self.openssl_index_file_path = "index"
		self.openssl_serial_file_path = "serial"
		self.openssl_configuration_file_path = "openssl.cnf"
		self.openssl_configuration_file_content = \
		"""
			#
			# OpenSSL example configuration file.
			# This is mostly being used for generation of certificate requests.
			#

			# This definition stops the following lines choking if HOME isn't
			# defined.
			HOME                    = .
			RANDFILE                = $ENV::HOME/.rnd

			# Extra OBJECT IDENTIFIER info:
			#oid_file               = $ENV::HOME/.oid
			oid_section             = new_oids

			# To use this configuration file with the "-extfile" option of the
			# "openssl x509" utility, name here the section containing the
			# X.509v3 extensions to use:
			# extensions            =
			# (Alternatively, use a configuration file that has only
			# X.509v3 extensions in its main [= default] section.)

			[ new_oids ]

			# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
			# Add a simple OID like this:
			# testoid1=1.2.3.4
			# Or use config file substitution like this:
			# testoid2=${testoid1}.5.6

			# Policies used by the TSA examples.
			tsa_policy1 = 1.2.3.4.1
			tsa_policy2 = 1.2.3.4.5.6
			tsa_policy3 = 1.2.3.4.5.7

			####################################################################
			[ ca ]
			default_ca      = CA_default            # The default ca section

			####################################################################
			[ CA_default ]

			dir = .
			certs = $dir
			new_certs_dir = $dir/certs
			database = """ + self.openssl_index_file_path + """
			serial = """ + self.openssl_serial_file_path + """

			certificate     = $dir/cacert.pem       # The CA certificate
			crlnumber       = $dir/crlnumber        # the current crl number
													# must be commented out to leave a V1 CRL
			crl             = $dir/crl.pem          # The current CRL
			private_key     = $dir/private/cakey.pem# The private key
			RANDFILE        = $dir/private/.rand    # private random number file

			x509_extensions = usr_cert              # The extentions to add to the cert

			# Comment out the following two lines for the "traditional"
			# (and highly broken) format.
			name_opt        = ca_default            # Subject Name options
			cert_opt        = ca_default            # Certificate field options

			# Extension copying option: use with caution.
			copy_extensions = copy

			# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
			# so this is commented out by default to leave a V1 CRL.
			# crlnumber must also be commented out to leave a V1 CRL.
			# crl_extensions        = crl_ext

			default_days    = 365                   # how long to certify for
			default_crl_days= 30                    # how long before next CRL
			default_md      = default               # use public key default MD
			preserve        = no                    # keep passed DN ordering

			# A few difference way of specifying how similar the request should look
			# For type CA, the listed attributes must be the same, and the optional
			# and supplied fields are just that :-)
			policy          = policy_match

			# For the CA policy
			[ policy_match ]
			countryName             = optional
			stateOrProvinceName     = optional
			organizationName        = optional
			organizationalUnitName  = optional
			commonName              = supplied
			emailAddress            = optional

			# For the 'anything' policy
			# At this point in time, you must list all acceptable 'object'
			# types.
			[ policy_anything ]
			countryName             = optional
			stateOrProvinceName     = optional
			localityName            = optional
			organizationName        = optional
			organizationalUnitName  = optional
			commonName              = supplied
			emailAddress            = optional

			####################################################################
			[ req ]
			default_bits            = 2048
			default_keyfile         = privkey.pem
			distinguished_name      = req_distinguished_name
			attributes              = req_attributes
			x509_extensions = v3_ca # The extentions to add to the self signed cert

			# Passwords for private keys if not present they will be prompted for
			# input_password = secret
			# output_password = secret

			# This sets a mask for permitted string types. There are several options.
			# default: PrintableString, T61String, BMPString.
			# pkix   : PrintableString, BMPString (PKIX recommendation before 2004)
			# utf8only: only UTF8Strings (PKIX recommendation after 2004).
			# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
			# MASK:XXXX a literal mask value.
			# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.
			string_mask = utf8only

			req_extensions = v3_req # The extensions to add to a certificate request
			
			[ req_distinguished_name ]
			countryName                     = Country Name (2 letter code)
			countryName_default             = US
			countryName_min                 = 2
			countryName_max                 = 2
			stateOrProvinceName             = State or Province Name (full name)
			stateOrProvinceName_default     = CA
			localityName                    = Locality Name (eg, city)
			localityName_default            = Fremont
			0.organizationName              = Organization Name (eg, company)
			0.organizationName_default      = CloudAwan
			organizationalUnitName          = Organizational Unit Name (eg, section)
			organizationalUnitName_default  = RD
			commonName                      = Common Name (e.g. server FQDN or YOUR name)
			commonName_max                  = 64
			emailAddress                    = Email Address
			emailAddress_max                = 64

			[ req_attributes ]
			challengePassword               = A challenge password
			challengePassword_min           = 4
			challengePassword_max           = 20

			unstructuredName                = An optional company name

			[ usr_cert ]

			# These extensions are added when 'ca' signs a request.

			# This goes against PKIX guidelines but some CAs do it and some software
			# requires this to avoid interpreting an end user certificate as a CA.

			basicConstraints=CA:FALSE

			# Here are some examples of the usage of nsCertType. If it is omitted
			# the certificate can be used for anything *except* object signing.

			# This is OK for an SSL server.
			# nsCertType                    = server

			# For an object signing certificate this would be used.
			# nsCertType = objsign

			# For normal client use this is typical
			# nsCertType = client, email
			# and for everything including object signing:
			# nsCertType = client, email, objsign

			# This is typical in keyUsage for a client certificate.
			# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

			# This will be displayed in Netscape's comment listbox.
			nsComment                       = "OpenSSL Generated Certificate"

			# PKIX recommendations harmless if included in all certificates.
			subjectKeyIdentifier=hash
			authorityKeyIdentifier=keyid,issuer

			# This stuff is for subjectAltName and issuerAltname.
			# Import the email address.
			# subjectAltName=email:copy
			# An alternative to produce certificates that aren't
			# deprecated according to PKIX.
			# subjectAltName=email:move

			# Copy subject details
			# issuerAltName=issuer:copy

			#nsCaRevocationUrl              = http://www.domain.dom/ca-crl.pem
			#nsBaseUrl
			#nsRevocationUrl
			#nsRenewalUrl
			#nsCaPolicyUrl
			#nsSslServerName

			# This is required for TSA certificates.
			# extendedKeyUsage = critical,timeStamping

			[ v3_req ]

			# Extensions to add to a certificate request

			basicConstraints = CA:FALSE
			keyUsage = nonRepudiation, digitalSignature, keyEncipherment

			subjectAltName = @alt_names

			[ alt_names ]
			IP.1 = 127.0.0.1
			DNS.1 = kubernetes
			DNS.2 = kubernetes.default
			DNS.3 = kubernetes.default.svc
			DNS.4 = kubernetes.default.svc.cluster.local
			
			[ v3_ca ]


			# Extensions for a typical CA


			# PKIX recommendation.

			subjectKeyIdentifier=hash

			authorityKeyIdentifier=keyid:always,issuer

			# This is what PKIX recommends but some broken software chokes on critical
			# extensions.
			#basicConstraints = critical,CA:true
			# So we do this instead.
			basicConstraints = CA:true

			# Key usage: this is typical for a CA certificate. However since it will
			# prevent it being used as an test self-signed certificate it is best
			# left out by default.
			# keyUsage = cRLSign, keyCertSign

			# Some might want this also
			# nsCertType = sslCA, emailCA

			# Include email address in subject alt name: another PKIX recommendation
			# subjectAltName=email:copy
			# Copy issuer details
			# issuerAltName=issuer:copy

			# DER hex encoding of an extension: beware experts only!
			# obj=DER:02:03
			# Where 'obj' is a standard or added object
			# You can even override a supported extension:
			# basicConstraints= critical, DER:30:03:01:01:FF

			[ crl_ext ]

			# CRL extensions.
			# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

			# issuerAltName=issuer:copy
			authorityKeyIdentifier=keyid:always

			[ proxy_cert_ext ]
			# These extensions should be added when creating a proxy certificate

			# This goes against PKIX guidelines but some CAs do it and some software
			# requires this to avoid interpreting an end user certificate as a CA.

			basicConstraints=CA:FALSE

			# Here are some examples of the usage of nsCertType. If it is omitted
			# the certificate can be used for anything *except* object signing.

			# This is OK for an SSL server.
			# nsCertType                    = server

			# For an object signing certificate this would be used.
			# nsCertType = objsign

			# For normal client use this is typical
			# nsCertType = client, email

			# and for everything including object signing:
			# nsCertType = client, email, objsign

			# This is typical in keyUsage for a client certificate.
			# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

			# This will be displayed in Netscape's comment listbox.
			nsComment                       = "OpenSSL Generated Certificate"

			# PKIX recommendations harmless if included in all certificates.
			subjectKeyIdentifier=hash
			authorityKeyIdentifier=keyid,issuer

			# This stuff is for subjectAltName and issuerAltname.
			# Import the email address.
			# subjectAltName=email:copy
			# An alternative to produce certificates that aren't
			# deprecated according to PKIX.
			# subjectAltName=email:move

			# Copy subject details
			# issuerAltName=issuer:copy

			#nsCaRevocationUrl              = http://www.domain.dom/ca-crl.pem
			#nsBaseUrl
			#nsRevocationUrl
			#nsRenewalUrl
			#nsCaPolicyUrl
			#nsSslServerName

			# This really needs to be in place for it to be a proxy certificate.
			proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

			####################################################################
			[ tsa ]

			default_tsa = tsa_config1       # the default TSA section

			[ tsa_config1 ]

			# These are used by the TSA reply generation only.
			dir             = ./demoCA              # TSA root directory
			serial          = $dir/tsaserial        # The current serial number (mandatory)
			crypto_device   = builtin               # OpenSSL engine to use for signing
			signer_cert     = $dir/tsacert.pem      # The TSA signing certificate
													# (optional)
			certs           = $dir/cacert.pem       # Certificate chain to include in reply
													# (optional)
			signer_key      = $dir/private/tsakey.pem # The TSA private key (optional)

			default_policy  = tsa_policy1           # Policy if request did not specify it
													# (optional)
			other_policies  = tsa_policy2, tsa_policy3      # acceptable policies (optional)
			digests         = md5, sha1             # Acceptable message digests (mandatory)
			accuracy        = secs:1, millisecs:500, microsecs:100  # (optional)
			clock_precision_digits  = 0     # number of digits after dot. (optional)
			ordering                = yes   # Is ordering defined for timestamps?
											# (optional, default: no)
			tsa_name                = yes   # Must the TSA name be included in the reply?
											# (optional, default: no)
			ess_cert_id_chain       = no    # Must the ESS cert id chain be included?
											# (optional, default: no)

		"""

	def __get_service_cluster_gateway(self):
		try:
			return ".".join(self.service_cluster_ip_range.split("/")[0].split(".")[:-1]) + ".1"
		except Exception as e:
			print e
			raise Exception("Fail to get service cluster gateway from " + str(self.service_cluster_ip_range))

	def __generate_ca_pair_if_not_existing(self):
		if os.path.isfile(self.ca_certificate_file_path) and os.path.isfile(self.ca_key_file_path):
			os.system("cp " + self.ca_certificate_file_path + " ca.cert")
			os.system("cp " + self.ca_key_file_path + " ca.key")
		else:
			if self.ca_required:
				if os.path.isfile("ca.cert") is False or os.path.isfile("ca.key") is False:
					raise Exception("The original CA used during the initial cluster install is required to sign the generated server certificates.")

			os.system("openssl genrsa -aes256 -out ca.key -passout pass:" + self.ca_key_passphrase + " 4096")
			os.system("openssl req -key ca.key -new -x509 -days " + self.ca_valid_days + " -sha256 -extensions v3_ca -out ca.cert -passin pass:" + self.ca_key_passphrase + " -subj \"/C=US/ST=CA/L=Fremont/O=CloudAwan/OU=Development/CN=kuberentes_cluster_ca\"")

	def __generate_index_if_not_existing(self):
		if os.path.isfile(self.openssl_index_file_path):
			pass
		else:
			with open(self.openssl_index_file_path, "w") as file_write:
				file_write.write("")
				
	def __generate_serial_if_not_existing(self):
		if os.path.isfile(self.openssl_serial_file_path):
			pass
		else:
			with open(self.openssl_serial_file_path, "w") as file_write:
				file_write.write("00")
	
	def __generate_configuration_if_not_existing(self):
		if os.path.isfile(self.openssl_configuration_file_path):
			pass
		else:
			with open(self.openssl_configuration_file_path, "w") as file_write:
				file_write.write(self.openssl_configuration_file_content)
			os.system("mkdir certs")
	
	def generate_certificate(self):
		self.__generate_ca_pair_if_not_existing()
		self.__generate_index_if_not_existing()
		self.__generate_serial_if_not_existing()
		self.__generate_configuration_if_not_existing()
	
		for ip in self.server_list:
			request_configuration = \
			"""
			[req]
			distinguished_name = req_distinguished_name
			req_extensions = v3_req

			[ req_distinguished_name ]
			countryName                     = Country Name (2 letter code)
			countryName_default             = US
			countryName_min                 = 2
			countryName_max                 = 2
			stateOrProvinceName             = State or Province Name (full name)
			stateOrProvinceName_default     = CA
			localityName                    = Locality Name (eg, city)
			localityName_default            = Fremont
			0.organizationName              = Organization Name (eg, company)
			0.organizationName_default      = CloudAwan
			organizationalUnitName          = Organizational Unit Name (eg, section)
			organizationalUnitName_default  = RD
			commonName                      = Common Name (e.g. server FQDN or YOUR name)
			commonName_max                  = 64
			emailAddress                    = Email Address
			emailAddress_max                = 64

			[ v3_req ]
			basicConstraints = CA:FALSE
			keyUsage = nonRepudiation, digitalSignature, keyEncipherment
			subjectAltName = @alt_names

			[ alt_names ]
			IP.1 = """ + ip + """
			IP.2 = """ + self.__get_service_cluster_gateway() + """
			DNS.1 = kubernetes
			DNS.2 = kubernetes.default
			DNS.3 = kubernetes.default.svc
			DNS.4 = kubernetes.default.svc.cluster.local
			"""
			with open("openssl" + ip + ".cnf", "w") as file_write:
				file_write.write(request_configuration)
		
			os.system("openssl req -new -nodes -config openssl" + ip + ".cnf -newkey rsa:2048 -keyout server" + ip + ".key -out server" + ip + ".csr -days " + self.server_valid_days + " -subj \"/C=US/ST=CA/L=Fremont/O=CloudAwan/OU=Development/CN=kuberentes_server_" + ip + "\"")
			os.system("openssl ca -batch -days " + self.server_valid_days + " -cert ca.cert -keyfile ca.key -key " + self.ca_key_passphrase + " -out server" + ip + ".cert -in server" + ip + ".csr -config " + self.openssl_configuration_file_path)
			os.system("rm server" + ip + ".csr")
			os.system("rm openssl" + ip + ".cnf")

		os.system("rm -rf certs")
		os.system("rm index.attr.old")
		os.system("rm index.attr")
		os.system("rm index.old")
		os.system("rm index")
		os.system("rm serial.old")
		os.system("rm serial")
		os.system("rm " + self.openssl_configuration_file_path)


CertificateGeneration().generate_certificate()